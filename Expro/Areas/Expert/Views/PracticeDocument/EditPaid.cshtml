@model Expro.ViewModels.DocumentPaidEditVM
@using Expro.Models.Enums
@using Expro.Common
@using Expro.ViewModels

@{
    ViewData["Title"] = localizer["EditPracticeDocument"];
}

@functions {
    public void RenderRedAsteriks()
    {
        <span class="text-danger">*</span>
    }
}

<form asp-action="EditPaid" id="editForm">
    <div class="border-bottom mb-4">
        <h2>@ViewData["Title"]</h2>
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    </div>
    <input asp-for="StatusID" type="hidden" />

    @if (ViewData["successfullySaved"] != null)
    {
        <div class="alert alert-soft-success text-center rounded-0 mb-0" role="alert">
            @localizer["DataSuccessfullySaved"]
        </div>
        <br />
    }
    @if (Model.StatusID == (int)DocumentStatusesEnum.WaitingForApproval)
    {
        <div class="alert alert-soft-info text-center rounded-0 mb-0" role="alert">
            @localizer["DocumentIsSentForApproval"]
        </div>
    }
    else if (Model.StatusID == (int)DocumentStatusesEnum.Approved)
    {
        <div class="alert alert-soft-success text-center rounded-0 mb-0" role="alert">
            @localizer["DocumentIsApprovedByAdmin"]
        </div>
    }
    else if (Model.StatusID == (int)DocumentStatusesEnum.Rejected)
    {
        <div class="alert alert-soft-danger text-center rounded-0 mb-0" role="alert">
            @localizer["DocumentIsRejectedByAdmin"]
        </div>
    }

    <!-- Form Group -->
    <div class="form-group">
        <label asp-for="Title" class="control-label"></label> @{ RenderRedAsteriks(); }
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <!-- End Form Group -->

    <div class="form-group">
        <label asp-for="LanguageID" class="control-label"></label> @{ RenderRedAsteriks(); }
        <select asp-for="LanguageID"
                asp-items="@ViewData["languages"] as IEnumerable<SelectListItem>"
                class="js-custom-select custom-select" size="1" style="opacity: 0;"
                data-hs-select2-options='{
                      "minimumResultsForSearch": "Infinity"
                    }'>
        </select>
        <span asp-validation-for="LanguageID" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="LawAreas" class="control-label"></label> @{ RenderRedAsteriks(); }
        <div>
            <select asp-for="LawAreas"
                    class="js-custom-select custom-select" size="1" multiple style="opacity: 0;"
                    data-hs-select2-options='{
                      "minimumResultsForSearch": "Infinity"
                    }'>
                @{
                    var items = ViewData["lawAreas"] as List<SelectListItemWithParent>;
                    var parentItems = items.Where(m => m.ParentValue == "").ToList();
                    for (int i = 0; i < parentItems.Count; i++)
                    {
                        <option value="@parentItems[i].Value" data-option-template="<b>@parentItems[i].Text</b>">@parentItems[i].Text</option>

                        var childItems = items.Where(m => m.ParentValue == parentItems[i].Value).ToList();
                        foreach (var childItem in childItems)
                        {
                            <option value="@childItem.Value" data-option-template="- @childItem.Text">@childItem.Text</option>
                        }
                    }
                }
            </select>
            <!-- End Select -->
        </div>
        <span asp-validation-for="LawAreas" class="text-danger"></span>
    </div>

    <div class="form-group">
        <input asp-for="ContentType" type="radio" value="@DocumentContentTypesEnum.file">
        <label asp-for="AttachmentID" class="control-label"></label>
        <input asp-for="AttachmentID" type="hidden" />
        @{
            string fileInputDisplayStyle = "";
            string existingFileContainerDisplayStyle = "";

            if (Model.AttachmentID.HasValue)
            {
                fileInputDisplayStyle = "style=display:none;";
            }
            else
            {
                existingFileContainerDisplayStyle = "style=display:none;";
            }
        }

        <div class="custom-file" @fileInputDisplayStyle>
            <input type="file" class="js-file-attach custom-file-input" id="fileInput"
                   data-hs-file-attach-options='{
                  "textTarget": "[for=\"fileInput\"]"
               }'>
            <label class="custom-file-label" for="fileInput">@localizer["SelectFile"]</label>
        </div>

        <div id="existingFileContainer" @existingFileContainerDisplayStyle>
            @if (Model.Attachment != null)
            {
                <i class="fa fa-file" aria-hidden="true"></i>
                <a href="@Model.Attachment.Url">@Model.Attachment.DisplayName</a>
                <button id="deleteFileBtn" type="button" class="btn btn-link" onclick="DeleteFile(@Model.Attachment.ID, '@Model.Attachment.Path');"><i class="fa fa-times text-danger" aria-hidden="true"></i></button>
            }
        </div>

        <div class="spinner-border spinner" id="fileUploadSpinner" style="display: none;"></div>
        <span asp-validation-for="AttachmentID" class="text-danger"></span>
    </div>

    <div class="form-group">
        <input asp-for="ContentType" type="radio" value="@DocumentContentTypesEnum.text">
        <label asp-for="Text" class="control-label"></label>
        <!-- Quill -->
        <div class="quill-custom Text">
            <div class="js-quill" style="min-height: 15rem;"
                 data-hs-quill-options='{
                   "placeholder": "Type your message...",
                    "modules": {
                      "toolbar": [["bold", "italic", "underline", "strike", "link", "image", "blockquote", "code", {"list": "bullet"}]]
                    }
                   }'>
                @Html.Raw(Model.Text)
            </div>
        </div>
        <!-- End Quill -->
        <textarea asp-for="Text" class="form-control" style="display: none;"></textarea>
        <span asp-validation-for="Text" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Price" class="control-label"></label> @{ RenderRedAsteriks(); }
        <input asp-for="Price" class="form-control" />
        <span asp-validation-for="Price" class="text-danger"></span>
    </div>

    <div class="form-group" id="actionButtonsBox">
        <input asp-for="ActionType" type="hidden" />
        <button type="submit" class="btn btn-info" actiontype="@DocumentActionTypesEnum.saveAsDraft">@localizer["SaveAsDraft"]</button>
        <button type="submit" class="btn btn-indigo" actiontype="@DocumentActionTypesEnum.submitForApproval">@localizer["SubmitForApproval"]</button>
        <div class="spinner-border spinner" style="display: none;"></div>
    </div>
</form>

<div>
    <a asp-action="Index">@localizer["BackToList"]</a>
</div>

@section CustomFrontStyles
{
    <link rel="stylesheet" href="~/lib/frontTheme/vendor/select2/dist/css/select2.min.css">
    <link rel="stylesheet" href="~/lib/frontTheme/vendor/quill/dist/quill.snow.css">
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script src="~/lib/frontTheme/vendor/select2/dist/js/select2.full.min.js"></script>
    <script src="~/lib/frontTheme/vendor/hs-file-attach/dist/hs-file-attach.min.js"></script>
    <script src="~/lib/frontTheme/vendor/quill/dist/quill.min.js"></script>

    <script>
        var input;
        var modelID = @Model.ID;
        var fileType = "@Constants.FileTypes.DOCUMENT";
        var spinnerTagID = "fileUploadSpinner";

        $(document).ready(function ()
        {
            InitFormPostSubmissionActions();
            InitSelectpicker();
            InitFileUploader();
            var quill = InitQuill();

            var statusID = @Model.StatusID;
            if (statusID == @((int)DocumentStatusesEnum.WaitingForApproval)
                || statusID == @((int)DocumentStatusesEnum.Approved)
                || statusID == @((int)DocumentStatusesEnum.Rejected))
            {
                $("form input, form select, form textarea").attr("disabled", "disabled");
                $("form #existingFileContainer button").attr("disabled", "disabled");
                $('#LawAreas').prop('disabled', true);
                $("#actionButtonsBox").html("");
                quill.disable();
            }

            $("form button[type=submit]").click(function (ev) {
                $("form input#ActionType").val($(this).attr("actiontype"));
            });


            $("#fileInput").change(function () {
                $("#" + spinnerTagID).show();
                var input = this;
                if (!(input.files && input.files[0])) {
                    $("#" + spinnerTagID).hide();
                    return;
                }

                var file = input.files[0];
                UploadToFirebaseStorage(file);
            });
        });

        function InitFormPostSubmissionActions() {
            $("#editForm").submit(function () {
                var isValid = $('#editForm').valid();
                if (isValid) {
                    ShowFormSpinner();
                    DisableFormElements();
                }
            });
        }

        function ShowFormSpinner() {
            $("#editForm #actionButtonsBox .spinner").show();
        }

        function DisableFormElements() {
            $("form#editForm input, form#editForm select, form#editForm textarea").attr("readonly", "readonly");
            $("form#editForm #existingFileContainer button").attr("disabled", "disabled");
            $("form#editForm button").attr("disabled", "disabled");
        }

        function InitQuill() {
            // INITIALIZATION OF QUILLJS EDITOR
            // =======================================================
            var options = {
                //debug: 'info',
                //modules: {
                //    toolbar: '#toolbar'
                //},
                //placeholder: 'Compose an epic...',
                //readOnly: true,
                //theme: 'snow'
            };
            var quill = $.HSCore.components.HSQuill.init('.js-quill', options);
            quill.on('text-change', function (delta, oldDelta, source) {
                //if (source == 'api') {
                //    alert("An API call triggered this change.");
                //} else if (source == 'user') {
                //    alert("A user action triggered this change.");
                //}

                var html = $(".quill-custom.Text .ql-editor").html();
                if (html == "<p><br></p>")
                    html = "";

                $("textarea#Text").val(html);
            });

            return quill;
        }

        function InitSelectpicker() {
            //$('#LawAreas').selectpicker();

            // INITIALIZATION OF SELECT2
            // =======================================================
            $('.js-custom-select').each(function () {
                var select2 = $.HSCore.components.HSSelect2.init($(this));
            });
        }

        function InitFileUploader() {
            // INITIALIZATION OF CUSTOM FILE
            // =======================================================
            $('.js-file-attach').each(function () {
                var customFile = new HSFileAttach($(this)).init();
            });
        }

        function UploadToFirebaseStorage(file)
        {
            var displayName = file.name;
            var extension = file.name.split('.')[1];

            // Create a root reference
            var storageRef = firebase.storage().ref();
            var uploadTask = storageRef.child('Documents/' + modelID + '.' + extension).put(file);

            // Listen for state changes, errors, and completion of the upload.
            uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'
                function (snapshot)
                {
                    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    console.log('Upload is ' + progress + '% done');
                    switch (snapshot.state)
                    {
                        case firebase.storage.TaskState.PAUSED: // or 'paused'
                            console.log('Upload is paused');
                            break;
                        case firebase.storage.TaskState.RUNNING: // or 'running'
                            console.log('Upload is running');
                            break;
                    }
                }, function (error)
                {
                    $("#" + spinnerTagID).hide();
                    console.log(error);

                }, function ()
                {
                    // Upload completed successfully, now we can get the download URL
                    var attachment = {
                        FileName: "" + modelID,
                        DisplayName: displayName,
                        Extension: extension,
                        Path: "",
                        Size: 0,
                        ContentType: "",
                        DownloadUrl: "",
                        FileType: fileType,
                        ModelID: modelID,
                        @*GUID: "@ViewData["fileGuid"]"*@
                    };
                    //console.log(uploadTask.snapshot.ref);


                    uploadTask.snapshot.ref.getMetadata().then(function (metaData)
                    {
                        //console.log(metaData);

                        //attachment.Filename = metaData.name;
                        attachment.Path = metaData.fullPath;
                        attachment.Size = metaData.size;
                        attachment.ContentType = metaData.contentType;

                        uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL)
                        {
                            attachment.DownloadUrl = downloadURL;

                            //console.log(attachment);
                            FileAjaxUpload2(input, file, attachment, spinnerTagID);
                        });
                    });
                }
            );
        }

        function FileAjaxUpload2(input, file, attachment, spinnerTagID, imgPreviewContainerTagID) {
            if (file) {
                $.ajax({
                    url: "/Attachment/Save",
                    data: JSON.stringify(attachment),
                    processData: false,
                    contentType: "application/json; charset=utf-8",
                    type: "POST",
                    //dataType: "json",
                    beforeSend: function () {
                        //alert("beforeSend");
                        //$("#" + spinnerTagID).show();
                        //$("#imgInp").attr("disabled", "disabled");
                        $(input).attr("disabled", "disabled");
                    },
                    success: function (data) {
                        //console.log("data: ");
                        //console.log(data);

                        $("form #AttachmentID").val(data.id);

                        //console.log(attachment);
                        var html = '';
                        html += '<i class="fa fa-file" aria-hidden="true"></i> ';
                        html += '<a href="' + attachment.DownloadUrl + '">' + attachment.DisplayName + '</a>';
                        html += "<button id='deleteFileBtn' type='button' class='btn btn-link' onclick='DeleteFile(" + data.id + ", \"" + attachment.Path + "\");'><i class='fa fa-times text-danger' aria-hidden='true'></i></button>";

                        $("#existingFileContainer").html(html);
                        $("#existingFileContainer").show();
                        $("#fileInput").parent().hide();

                        //alert("File uploaded!");
                    },
                    error: function (data) {
                        alert("@localizer["Error"]!");
                    },
                    complete: function () {
                        $("#" + spinnerTagID).hide();
                        $(input).removeAttr("disabled");
                    }
                });
            }
            else {
                $("#" + spinnerTagID).hide();
                $(input).removeAttr("disabled");
            }
        }

        function DeleteFile(fileID, filePath) {
            FileAjaxDelete(fileID, modelID, fileType, spinnerTagID, null, "deleteFileBtn", filePath);
        }

        function FileAjaxDelete(fileID, modelID, fileType, spinnerTagID, imgPreviewContainerTagID, deleteBtnID, filePath) {
            if (fileID != undefined) {
                var formData = new FormData();
                formData.append("fileID", "" + fileID);
                formData.append("objID", "" + modelID);
                formData.append("fileType", fileType);

                $.ajax({
                    url: "/Attachment/Delete",
                    data: formData,
                    processData: false,
                    contentType: false,
                    type: "POST",
                    beforeSend: function () {
                        //alert("beforeSend");
                        $("#" + spinnerTagID).show();
                        //$("#imgInp").attr("disabled", "disabled");
                        $("#" + deleteBtnID).attr("disabled", "disabled");
                    },
                    success: function (data) {
                        DeleteFromFirebaseStorage(filePath);
                    },
                    error: function (data) {
                        console.log(data);
                        alert("@localizer["Error"]: " + data.responseJSON.errorMessage);
                        $("#" + spinnerTagID).hide();
                        $("#" + deleteBtnID).removeAttr("disabled");
                    },
                    complete: function () {
                        //alert("completed");
                        //$("#" + spinnerTagID).hide();
                        //$("#imgInp").removeAttr("disabled");
                        //$("#" + deleteBtnID).removeAttr("disabled");
                    }
                });
            }
        }

        function DeleteFromFirebaseStorage(filePath) {
            var storageRef = firebase.storage().ref();
            // Create a reference to the file to delete
            var documentRef = storageRef.child(filePath);

            // Delete the file
            documentRef.delete().then(function () {
                // File deleted successfully
                $("#" + spinnerTagID).hide();
                $("#existingFileContainer").html("");
                $("#fileInput").parent().show();
            }).catch(function (error) {
                // Uh-oh, an error occurred!
                console.log(error);
                $("#" + spinnerTagID).hide();
                $("#existingFileContainer").html("");
                $("#fileInput").parent().show();
            });
        }
    </script>
}
