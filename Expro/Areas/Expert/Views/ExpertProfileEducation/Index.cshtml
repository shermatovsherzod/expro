@model Expro.ViewModels.ExpertProfileEducationEditVM
@using Expro.Common

@{
    Layout = "_LayoutProfile";
    ViewData["Title"] = localizer["Education"];
    <link href="~/lib/yearpicker/yearpicker.css" rel="stylesheet" />
}



<div class="row">
    <div class="col-md-12">
        @if ((bool)ViewBag.Message)
        {
            <div class="alert alert-soft-success" role="alert">
                @localizer["ChangesSaved"]
            </div>
        }
    </div>
</div>

<div class="d-flex">
    <button type="button" data-toggle="modal" class="btn btn-sm btn-primary" data-target="#modalwindow">@localizer["AddEducation"]</button>
</div>


<div class="row">
    <div class="col-md-12">
        <br />
        <table class="table table-thead-bordered">
            <thead class="thead-light">
                <tr>
                    <th>@localizer["lblCountry"]</th>
                    <th>@localizer["lblCity"]</th>
                    <th>@localizer["lblUniversity"]</th>
                    <th>@localizer["lblFaculty"]</th>
                    <th>@localizer["lblGraduationYear"]</th>
                    <th>@localizer["Diploma"]</th>
                    <th>@localizer["Action"]</th>
                </tr>
            </thead>
            <tbody>
                @{
                    List<Expro.ViewModels.ExpertProfileEducationDetailsVM> edicationList = ViewData["expertEducationListVM"] as List<Expro.ViewModels.ExpertProfileEducationDetailsVM>;
                }

                @foreach (var item in edicationList)
                {
                    <tr>
                        <td>@item.Country</td>
                        <td>@item.City</td>
                        <td>@item.University</td>
                        <td>@item.Faculty</td>
                        <td align="center">@item.GraduationYear</td>
                        <td>
                            <a href="@item.Diploma.Url" target="_blank" download="@item.Diploma.DisplayName">@item.Diploma.DisplayName</a>
                        </td>
                        <td align="center">
                            <button type="button" data-cid="@item.ID" class="btn btn-danger btn-xs btn-icon btndelete">
                                <i class="fa fa-times"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<!-- Modal -->
<div id="modalwindow" tabindex="-1" class="modal fade" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@localizer["AddEducation"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <form asp-controller="ExpertProfileEducation" asp-action="Index"
                  id="addEducationForm"
                  onsubmit="SubmitEducationForm()"
                  data-ajax="true"
                  data-ajax-method="POST"
                  data-ajax-failure="PostFailure"
                  data-ajax-success="PostSuccess"
                  data-ajax-complete="PostCompleted">

                <div class="modal-body">
                    <div class="border-bottom mb-2">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    </div>

                    <!-- Form Group -->
                    <div class="row form-group">
                        <div class="col-sm-4 col-form-label">
                            <label asp-for="@Model.CountryID" style="float:left;" class="input-label"></label><span class="text-danger">*</span>
                        </div>
                        <div class="col-sm-8">
                            <select asp-for="@Model.CountryID"
                                    asp-items="@ViewData["country"] as IEnumerable<SelectListItem>"
                                    class="js-custom-select custom-select">
                                <option disabled selected>--- @localizer["CountrySelect"] ---</option>
                            </select>

                            <span asp-validation-for="@Model.CountryID" class="text-danger"></span>
                        </div>
                    </div>
                    <!-- End Form Group -->
                    <!-- Form Group -->
                    <div class="row form-group">
                        <div class="col-sm-4 col-form-label">
                            <label asp-for="@Model.City" style="float:left;" class="input-label"></label><span class="text-danger">*</span>
                        </div>
                        <div class="col-sm-8">
                            <input asp-for="@Model.City" class="form-control" placeholder="@localizer["lblCity"]"/>
                            <span asp-validation-for="@Model.City"></span>
                        </div>
                    </div>
                    <!-- End Form Group -->
                    <!-- Form Group -->
                    <div class="row form-group">
                        <div class="col-sm-4 col-form-label">
                            <label asp-for="@Model.University" style="float:left;" class="input-label"></label><span class="text-danger">*</span>
                        </div>
                        <div class="col-sm-8">
                            <input asp-for="@Model.University" class="form-control" placeholder="@localizer["lblUniversity"]" />
                            <span asp-validation-for="@Model.University"></span>
                        </div>
                    </div>
                    <!-- End Form Group -->
                    <!-- Form Group -->
                    <div class="row form-group">
                        <div class="col-sm-4 col-form-label">
                            <label asp-for="@Model.Faculty" style="float:left;" class="input-label"></label><span class="text-danger">*</span>
                        </div>
                        <div class="col-sm-8">
                            <input asp-for="@Model.Faculty" class="form-control" placeholder="@localizer["lblFaculty"]" />
                            <span asp-validation-for="@Model.Faculty"></span>
                        </div>
                    </div>
                    <!-- End Form Group -->
                    <!-- Form Group -->
                    <div class="row form-group">
                        <div class="col-sm-4 col-form-label">
                            <label asp-for="@Model.GraduationYear" style="float:left;" class="input-label"></label><span class="text-danger">*</span>
                        </div>
                        <div class="col-sm-8">
                            <input type="text" asp-for="@Model.GraduationYear" placeholder="@localizer["lblGraduationYear"]" class="form-control yearpicker" onkeydown="event.preventDefault()" />
                            <span asp-validation-for="@Model.GraduationYear"></span>
                        </div>
                    </div>
                    <!-- End Form Group -->
                    <div class="custom-file">
                        <input type="file" class="js-file-attach custom-file-input" id="addEducationFormAttachment"
                               accept=".doc, .docx, .rtf, .xml, .xls, .xlsx, .ppt, .pptx, text/plain, application/pdf, image/*"
                               data-hs-file-attach-options='{
                              "textTarget": "[for=\"addEducationFormAttachment\"]"
                           }'>
                        <label class="custom-file-label" for="customFile">@localizer["UploadDiploma"]</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <!-- Footer -->
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-sm btn-secondary" data-dismiss="modal">@localizer["Close"]</button>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-sm btn-primary">@localizer["Add"]</button>
                        <div class="spinner-border spinner" style="display: none;"></div>
                    </div>
                    <!-- End Footer -->
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script src="~/lib/yearpicker/yearpicker.js"></script>

    <script>
        $('.yearpicker').yearpicker();
    </script>
    
    <script>
        $(document).ready(function () {
            if ($('.validation-summary-errors').length) {
                $('#modalwindow').modal('show');
            }            
        });

        $('.modal').on('hidden.bs.modal', function (e) {
            $(".modal-body input").val("");
            $('#CountryID').val('');
        });

        $(".modal").on('shown.bs.modal', function () {
            $(".modal-body input").val("");
            $('#CountryID').val('');
        });
    </script>

    <script>
        $('.btndelete').on('click', function () {
            if (confirm('Вы действительно хотите удалить запись?')) {
                var id = $(this).data("cid");
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("DeleteEducation", "ExpertProfileEducation")',
                    data:
                    {
                        id
                    },
                    success: function (data) {
                        document.location = '/Expert/ExpertProfileEducation/Index';
                    },
                    error: function (data) {
                        alert("Error!");
                    },
                    complete: function (data) {
                    }
                });
            }
          });
    </script>

    <script>
        var fileInput;
        var educationID = 0;

        function SubmitEducationForm() {
            var isValid = $('#addEducationForm').valid();
            if (isValid) {
                $("#addEducationForm .spinner").show();

                DisableFormElements();

                return true;
            }
            else
                return false;
        }

        function ShowAnswerFormSpinner() {

        }

        function DisableFormElements() {
            $("#addEducationForm input").attr("readonly", "readonly");
            $("#addEducationForm textarea").attr("readonly", "readonly");
            $("#addEducationForm button").attr("disabled", "disabled");
        }

        function PostFailure(data) {
            alert("Ошибка: " + data.responseJSON.errorMessage);
            //console.log(data);
            $("#addEducationForm .spinner").hide();
        }

        function PostSuccess(data) {
            //alert("success");
            console.log(data);
            educationID = data.id;
            //alert("success");

            fileInput = document.getElementById('addEducationFormAttachment')
            //fileInput = $("#addEducationForm input#attachment");
            //console.log(fileInput);
            if (!(fileInput.files && fileInput.files[0])) {
                //$("#" + spinnerTagID).hide();
                //alert("no file is selected");
                Reload();
            }
            else {
                var file = fileInput.files[0];
                UploadToFirebaseStorageAnswerFile(file);
            }
        }

        function PostCompleted(data) {
            //alert("completed");
            //console.log(data);
            //alert("completed");
            //$("#addEducationForm .spinner").hide();
        }

        function UploadToFirebaseStorageAnswerFile(file) {
            var displayName = file.name;
            var extension = file.name.split('.')[1];

            // Create a root reference
            var storageRef = firebase.storage().ref();
            var uploadTask = storageRef.child('Educations/' + educationID + '.' + extension).put(file);

            // Listen for state changes, errors, and completion of the upload.
            uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'
                function (snapshot)
                {
                    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    console.log('Upload is ' + progress + '% done');
                    switch (snapshot.state)
                    {
                        case firebase.storage.TaskState.PAUSED: // or 'paused'
                            console.log('Upload is paused');
                            break;
                        case firebase.storage.TaskState.RUNNING: // or 'running'
                            console.log('Upload is running');
                            break;
                    }
                }, function (error)
                {
                    $("#addEducationForm .spinner").hide();
                    console.log(error);
                }, function ()
                {
                    // Upload completed successfully, now we can get the download URL
                    var attachment = {
                        FileName: "" + educationID,
                        DisplayName: displayName,
                        Extension: extension,
                        Path: "",
                        Size: 0,
                        ContentType: "",
                        DownloadUrl: "",
                        FileType: "@Constants.FileTypes.EDUCATION",
                        ModelID: educationID
                    };
                    //console.log(uploadTask.snapshot.ref);


                    uploadTask.snapshot.ref.getMetadata().then(function (metaData)
                    {
                        //console.log(metaData);

                        //attachment.Filename = metaData.name;
                        attachment.Path = metaData.fullPath;
                        attachment.Size = metaData.size;
                        attachment.ContentType = metaData.contentType;

                        uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL)
                        {
                            attachment.DownloadUrl = downloadURL;

                            //console.log(attachment);
                            FileAjaxUpload(fileInput, file, attachment);
                        });
                    });
                }
            );
        }

        function FileAjaxUpload(input, file, attachment) {
            if (file) {
                $.ajax({
                    url: "/Attachment/Save",
                    data: JSON.stringify(attachment),
                    processData: false,
                    contentType: "application/json; charset=utf-8",
                    type: "POST",
                    //dataType: "json",
                    beforeSend: function () {
                        //alert("beforeSend");
                        //$("#" + spinnerTagID).show();
                        //$("#imgInp").attr("disabled", "disabled");
                        $(input).attr("disabled", "disabled");
                    },
                    success: function (data) {
                        Reload();
                        //alert("File uploaded!");
                    },
                    error: function (data) {
                        alert("Error!");
                        $("#addEducationForm .spinner").hide();
                    },
                    complete: function () {
                        //$("#" + spinnerTagID).hide();
                        //$(input).removeAttr("disabled");
                    }
                });
            }
            else {
                //$("#" + spinnerTagID).hide();
                $("#addEducationForm .spinner").hide();
                $(input).removeAttr("disabled");
            }
        }

        function Reload() {
            //location.reload();
            window.location.replace("/Expert/ExpertProfileEducation?message=true");
        }
    </script>

}
