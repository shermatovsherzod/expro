@model Expro.ViewModels.QuestionPaidEditVM
@using Expro.Models.Enums
@using Expro.Common
@using Expro.ViewModels

@{
    ViewData["Title"] = localizer["AddNewQuestionWithFee"];
    var lawAreasWithParent = ViewData["lawAreas"] as List<SelectListItemWithParent>;
    int selectedLawArea = Model?.LawAreaParentID ?? 0;
}

@functions {
    public void RenderRedAsteriks()
    {
        <span class="text-danger">*</span>
    }
}

<form asp-controller="Question" asp-action="CreatePaid"
      id="addForm"
      onsubmit="SubmitForm()"
      data-ajax="true"
      data-ajax-method="POST"
      data-ajax-failure="PostFailure"
      data-ajax-success="PostSuccess"
      data-ajax-complete="PostCompleted">
    <div class="border-bottom mb-4">
        <h2>@ViewData["Title"]</h2>
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    </div>

    <!-- Form Group -->
    <div class="form-group">
        <label asp-for="Title" class="control-label"></label> @{ RenderRedAsteriks(); }
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <!-- End Form Group -->

    <div class="form-group">
        <label asp-for="LawAreaParentID" class="control-label"></label> @{ RenderRedAsteriks(); }
        <select asp-for="LawAreaParentID"
                class="js-custom-select custom-select" size="1" style="opacity: 0;"
                data-hs-select2-options='{
                    "minimumResultsForSearch": "Infinity"
                }'>
            @{
                var parentItems = lawAreasWithParent.Where(m => m.ParentValue == "").ToList();

                <option value=""></option>
                for (int i = 0; i < parentItems.Count; i++)
                {
                    <option value="@parentItems[i].Value">@parentItems[i].Text</option>
                }
            }
        </select>
        <!-- End Select -->
        <span asp-validation-for="LawAreaParentID" class="text-danger"></span>
    </div>

    <div class="form-group">
        <select asp-for="LawAreas"
                class="js-custom-select custom-select" size="1" multiple style="opacity: 0;"
                data-hs-select2-options='{
                    "minimumResultsForSearch": "Infinity"
                }'>
        </select>
        <!-- End Select -->
        <span asp-validation-for="LawAreas" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Text" class="control-label"></label> @{ RenderRedAsteriks(); }
        <!-- Quill -->
        <div class="quill-custom Text">
            <div class="js-quill" style="min-height: 15rem;"
                 data-hs-quill-options='{
                   "placeholder": "@localizer["TypeYourQuestionBrieflyHere"]",
                    "modules": {
                      "toolbar": [["bold", "italic", "underline", "strike", "link", "image", "blockquote", "code", {"list": "bullet"}]]
                    }
                   }'>
                @Html.Raw(Model?.Text)
            </div>
        </div>
        <!-- End Quill -->
        <textarea asp-for="Text" class="form-control" style="height: 0px; visibility:hidden;"></textarea>
        <span asp-validation-for="Text" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="AttachmentID" class="control-label"></label>
        <input asp-for="AttachmentID" type="hidden" />
        <div class="custom-file">
            <input type="file" class="js-file-attach custom-file-input" id="fileInput"
                   accept=".doc, .docx, .rtf, .xml, .xls, .xlsx, .ppt, .pptx, text/plain, application/pdf, image/*"
                   data-hs-file-attach-options='{
                  "textTarget": "[for=\"fileInput\"]"
               }'>
            <label class="custom-file-label" for="fileInput">@localizer["SelectFile"]</label>
        </div>

        @*<div class="spinner-border spinner" id="fileUploadSpinner" style="display: none;"></div>*@
        <span asp-validation-for="AttachmentID" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Price" class="control-label"></label> @{ RenderRedAsteriks(); }
        <input asp-for="Price" class="form-control" />
        <span asp-validation-for="Price" class="text-danger"></span>
    </div>
    <div class="form-group" id="actionButtonsBox">
        <input asp-for="ActionType" type="hidden" />
        <button type="submit" class="btn btn-info" actiontype="@DocumentActionTypesEnum.saveAsDraft">@localizer["SaveAsDraft"]</button>
        <button type="submit" class="btn btn-indigo" actiontype="@DocumentActionTypesEnum.publish">@localizer["DoPublish"]</button>
        <div class="spinner-border spinner" style="display: none;"></div>
    </div>
</form>

<div>
    <a asp-action="Index">@localizer["BackToList"]</a>
</div>

@section CustomFrontStyles
{
    <link rel="stylesheet" href="~/lib/frontTheme/vendor/select2/dist/css/select2.min.css">
    <link rel="stylesheet" href="~/lib/frontTheme/vendor/quill/dist/quill.snow.css">
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script src="~/lib/frontTheme/vendor/select2/dist/js/select2.full.min.js"></script>
    <script src="~/lib/frontTheme/vendor/hs-file-attach/dist/hs-file-attach.min.js"></script>
    <script src="~/lib/frontTheme/vendor/quill/dist/quill.min.js"></script>
    <script src="~/js/LawAreaPickersBinder.js"></script>

    <script>
        var lawAreasWithParent = @Html.Raw(Json.Serialize(lawAreasWithParent));
        var selectedParentLawArea = @selectedLawArea;
        var selectedChildLawAreas = @Html.Raw(Json.Serialize(Model?.LawAreas ?? null));

        $(document).ready(function () {
            BindLawAreaPickers(
                "select#LawAreaParentID",
                "select#LawAreas",
                lawAreasWithParent,
                selectedParentLawArea,
                selectedChildLawAreas);
        });
    </script>

    <script>
        $(document).ready(function ()
        {
            //InitFormPostSubmissionActions();
            InitSelectpicker();
            InitFileUploader();
            var quill = InitQuill();

            $("form button[type=submit]").click(function (ev) {
                $("form input#ActionType").val($(this).attr("actiontype"));
            });
        });

        function InitQuill() {
            // INITIALIZATION OF QUILLJS EDITOR
            // =======================================================
            var options = {
                //debug: 'info',
                //modules: {
                //    toolbar: '#toolbar'
                //},
                //placeholder: 'Compose an epic...',
                //readOnly: true,
                //theme: 'snow'
            };
            var quill = $.HSCore.components.HSQuill.init('.js-quill', options);
            quill.on('text-change', function (delta, oldDelta, source) {
                //if (source == 'api') {
                //    alert("An API call triggered this change.");
                //} else if (source == 'user') {
                //    alert("A user action triggered this change.");
                //}

                var html = $(".quill-custom.Text .ql-editor").html();
                if (html == "<p><br></p>")
                    html = "";

                $("textarea#Text").val(html);
            });

            return quill;
        }

        function InitSelectpicker() {
            //$('#LawAreas').selectpicker();

            // INITIALIZATION OF SELECT2
            // =======================================================
            $('.js-custom-select').each(function () {
                var select2 = $.HSCore.components.HSSelect2.init($(this));
            });
        }

        function InitFileUploader() {
            // INITIALIZATION OF CUSTOM FILE
            // =======================================================
            $('.js-file-attach').each(function () {
                var customFile = new HSFileAttach($(this)).init();
            });
        }

        var fileInput;
        var modelID = 0;

        function SubmitForm() {
            var isValid = $('#addForm').valid();
            if (isValid) {
                $("#addForm .spinner").show();

                DisableFormElements();

                return true;
            }
            else
                return false;
        }

        function DisableFormElements() {
            $("#addForm input").attr("readonly", "readonly");
            $("#addForm textarea").attr("readonly", "readonly");
            $("#addForm button").attr("disabled", "disabled");
        }

        function PostFailure(data) {
            alert("Ошибка: " + data.responseJSON.errorMessage);
            //console.log(data);
            $("#addForm .spinner").hide();
        }

        function PostSuccess(data) {
            //alert("success");
            //console.log(data);
            modelID = data.id;

            fileInput = document.getElementById('fileInput')
            //fileInput = $("#addForm input#attachment");
            //console.log(fileInput);
            if (!(fileInput.files && fileInput.files[0])) {
                //$("#" + spinnerTagID).hide();
                //alert("no file is selected");
                RedirectToEditPageAfterSuccessCreate(modelID);
            }
            else {
                var file = fileInput.files[0];
                UploadToFirebaseStorageAnswerFile(file);
            }
        }

        function PostCompleted(data) {
            //alert("completed");
            //console.log(data);
            //alert("completed");
            //$("#addForm .spinner").hide();
        }

        function UploadToFirebaseStorageAnswerFile(file) {
            var displayName = file.name;
            var extension = file.name.split('.')[1];

            // Create a root reference
            var storageRef = firebase.storage().ref();
            var uploadTask = storageRef.child('Questions/' + modelID + '.' + extension).put(file);

            // Listen for state changes, errors, and completion of the upload.
            uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'
                function (snapshot)
                {
                    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    console.log('Upload is ' + progress + '% done');
                    switch (snapshot.state)
                    {
                        case firebase.storage.TaskState.PAUSED: // or 'paused'
                            console.log('Upload is paused');
                            break;
                        case firebase.storage.TaskState.RUNNING: // or 'running'
                            console.log('Upload is running');
                            break;
                    }
                }, function (error)
                {
                    $("#addForm .spinner").hide();
                    console.log(error);
                }, function ()
                {
                    // Upload completed successfully, now we can get the download URL
                    var attachment = {
                        FileName: "" + modelID,
                        DisplayName: displayName,
                        Extension: extension,
                        Path: "",
                        Size: 0,
                        ContentType: "",
                        DownloadUrl: "",
                        FileType: "@Constants.FileTypes.QUESTION",
                        ModelID: modelID
                    };
                    //console.log(uploadTask.snapshot.ref);


                    uploadTask.snapshot.ref.getMetadata().then(function (metaData)
                    {
                        //console.log(metaData);

                        //attachment.Filename = metaData.name;
                        attachment.Path = metaData.fullPath;
                        attachment.Size = metaData.size;
                        attachment.ContentType = metaData.contentType;

                        uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL)
                        {
                            attachment.DownloadUrl = downloadURL;

                            //console.log(attachment);
                            FileAjaxUpload(fileInput, file, attachment);
                        });
                    });
                }
            );
        }

        function FileAjaxUpload(input, file, attachment) {
            if (file) {
                $.ajax({
                    url: "/Attachment/Save",
                    data: JSON.stringify(attachment),
                    processData: false,
                    contentType: "application/json; charset=utf-8",
                    type: "POST",
                    //dataType: "json",
                    beforeSend: function () {
                        //alert("beforeSend");
                        //$("#" + spinnerTagID).show();
                        //$("#imgInp").attr("disabled", "disabled");
                        $(input).attr("disabled", "disabled");
                    },
                    success: function (data) {
                        RedirectToEditPageAfterSuccessCreate(attachment.ModelID);
                        //alert("File uploaded!");
                    },
                    error: function (data) {
                        alert("Error!");
                        $("#addForm .spinner").hide();
                    },
                    complete: function () {
                        //$("#" + spinnerTagID).hide();
                        //$(input).removeAttr("disabled");
                    }
                });
            }
            else {
                //$("#" + spinnerTagID).hide();
                $("#addForm .spinner").hide();
                $(input).removeAttr("disabled");
            }
        }

        function RedirectToEditPageAfterSuccessCreate(id) {
            window.location.replace("/User/Question/EditPaid/" + id + "?successfullyCreated=true");
        }
    </script>
}
