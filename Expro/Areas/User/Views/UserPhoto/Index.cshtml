@model Expro.ViewModels.SimpleUser.SimpleUserShortInfoVM
@using Expro.Common

@{
    ViewData["Title"] = "Фото";
    Layout = "_LayoutProfile";
}


<!-- Form Group -->
<div class="row form-group">
    <div class="col-sm-12">
        <div class="media align-items-center">
            <label class="avatar avatar-xxl avatar-circle mr-4" for="avatarUploader">
                <img id="imgContainer" class="avatar-img" src="@Model.Avatar.Url" alt="Image Description">
            </label>

            <div class="media-body">
                <div class="btn btn-sm btn-primary file-attachment-btn mb-2 mb-sm-0 mr-2">
                    Upload Photo
                    <input type="file" class="js-file-attach file-attachment-btn-label" id="imgInp" accept="image/*"
                           data-hs-file-attach-options='{
                                    "textTarget": "#avatarImg",
                                    "mode": "image",
                                    "targetAttr": "src",
                                    "allowTypes": [".png", ".jpeg", ".jpg"]
                                 }'>
                    <div class="spinner-border spinner" id="spinner" style="display: none;"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- End Form Group -->


@section Scripts {
    <script>
        var input;
        var modelID = "@Model.ID";
        var fileType = "@Constants.FileTypes.USER_AVATAR";
        var spinnerTagID = "spinner";
        var imgPreviewContainerTagID = "imgContainer";

        $(document).ready(function () {
            $("#imgInp").change(function ()
            {
                $("#" + spinnerTagID).show();
                var input = this;
                if (!(input.files && input.files[0]))
                {
                    $("#" + spinnerTagID).hide();
                    return;
                }

                var file = input.files[0];

                resize(file);
            });
        });

        function resize(file)
        {
            //define the width to resize e.g 400px
            var resize_width = 400;//without px

            //get the image selected
            //var file = document.querySelector('#uploader').files[0];

            //create a FileReader
            var reader = new FileReader();

            //image turned to base64-encoded Data URI.
            reader.readAsDataURL(file);
            reader.name = file.name;//get the image's name
            reader.size = file.size; //get the image's size
            reader.onload = function (event)
            {
                var img = new Image();//create a image
                img.src = event.target.result;//result is base64-encoded Data URI
                img.name = event.target.name;//set name (optional)
                img.size = event.target.size;//set size (optional)
                img.onload = function (el)
                {
                    var elem = document.createElement('canvas');//create a canvas

                    //scale the image to 600 (width) and keep aspect ratio
                    var scaleFactor = resize_width / el.target.width;
                    elem.width = resize_width;
                    elem.height = el.target.height * scaleFactor;

                    //draw in canvas
                    var ctx = elem.getContext('2d');
                    ctx.drawImage(el.target, 0, 0, elem.width, elem.height);

                    //get the base64-encoded Data URI from the resize image
                    var srcEncoded = ctx.canvas.toDataURL(el.target, 'image/jpeg', 0);

                    //assign it to thumb src
                    //document.querySelector('#image').src = srcEncoded;

                    /*Now you can send "srcEncoded" to the server and
                    convert it to a png o jpg. Also can send
                    "el.target.name" that is the file's name.*/

                    HandleUploadTask(file, srcEncoded);
                }
            }
        }

        function HandleUploadTask(file, srcEncoded)
        {
            var displayName = file.name;
            var extension = file.name.split('.')[1];

            // Create a root reference
            var storageRef = firebase.storage().ref();
            var uploadTask = storageRef.child('Avatars/' + modelID + '.' + extension).put(file);

            // Listen for state changes, errors, and completion of the upload.
            uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'
                function (snapshot)
                {
                    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    console.log('Upload is ' + progress + '% done');
                    switch (snapshot.state)
                    {
                        case firebase.storage.TaskState.PAUSED: // or 'paused'
                            console.log('Upload is paused');
                            break;
                        case firebase.storage.TaskState.RUNNING: // or 'running'
                            console.log('Upload is running');
                            break;
                    }
                }, function (error)
                {
                    $("#" + spinnerTagID).hide();
                    console.log(error);

                }, function ()
                {
                    // Upload completed successfully, now we can get the download URL
                    var attachment = {
                        FileName: "" + modelID,
                        DisplayName: displayName,
                        Extension: extension,
                        Path: "",
                        Size: 0,
                        ContentType: "",
                        DownloadUrl: "",
                        FileType: fileType,
                        ModelID: modelID,
                    };
                    //console.log(uploadTask.snapshot.ref);


                    uploadTask.snapshot.ref.getMetadata().then(function (metaData)
                    {
                        //console.log(metaData);

                        //attachment.Filename = metaData.name;
                        attachment.Path = metaData.fullPath;
                        attachment.Size = metaData.size;
                        attachment.ContentType = metaData.contentType;

                        uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL)
                        {
                            attachment.DownloadUrl = downloadURL;

                            //console.log(attachment);
                            FileAjaxUpload2(input, file, attachment, spinnerTagID, imgPreviewContainerTagID);
                            location.reload(); 
                        });
                    });
                }
            );
        }

        function FileAjaxUpload2(input, file, attachment, spinnerTagID, imgPreviewContainerTagID)
        {
            if (file)
            {
                $.ajax({
                    url: "/Attachment/Save",
                    data: JSON.stringify(attachment),
                    processData: false,
                    contentType: "application/json; charset=utf-8",
                    type: "POST",
                    //dataType: "json",
                    beforeSend: function ()
                    {
                        //alert("beforeSend");
                        //$("#" + spinnerTagID).show();
                        //$("#imgInp").attr("disabled", "disabled");
                        $(input).attr("disabled", "disabled");
                    },
                    success: function (data)
                    {
                        if (imgPreviewContainerTagID != undefined
                            || imgPreviewContainerTagID != null
                            || imgPreviewContainerTagID != "")
                        {
                            var reader = new FileReader();
                            reader.onload = function (e)
                            {
                                $("#" + imgPreviewContainerTagID).attr('src', e.target.result);
                            }
                            reader.readAsDataURL(file);
                        }
                        else
                        {
                            //alert("File uploaded!");
                        }
                    },
                    error: function (data)
                    {
                        alert("Error!");
                    },
                    complete: function ()
                    {
                        $("#" + spinnerTagID).hide();
                        $(input).removeAttr("disabled");
                    }
                });
            }
        }
    </script>
}
