@model IEnumerable<Expro.ViewModels.QuestionAnswerDetailsVM>
@using Expro.Common

@{
    //string targetContainerID = ViewData["targetContainerID"].ToString();
    int documentID = int.Parse(ViewData["objectID"].ToString());
}

<!-- The Modal -->
<div class="modal" id="moneyDistributionModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">@*Modal Heading*@</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>#</th>
                            @*<th>Ответ</th>*@
                            <th>Эксперт</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int i = 1;
                        }
                        @foreach (var answer in Model)
                        {
                            <tr id="answerForDistribution_@answer.ID">
                                <td>@i</td>
                                @*<td></td>*@
                                <td>@answer.Author.FullName</td>
                                <td>
                                    <select class="form-control" data-answerid="@answer.ID">
                                        <option></option>
                                        <option value="50">50%</option>
                                        <option value="100">100%</option>
                                    </select>
                                </td>
                            </tr>

                            i++;
                        }
                    </tbody>
                </table>
                <br />
                <div class="alert alert-danger errorMessage" style="display: none;"></div>
                <div class="alert alert-success successMessage" style="display: none;"></div>
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <div class="spinner-border spinner" style="display: none;"></div>
                <button type="button" class="btn btn-primary" onclick="SubmitDistribution();">Ок</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal">Отмена</button>
            </div>

        </div>
    </div>
</div>

<script>
    function SubmitDistribution() {
        var distributionData = [];

        var distributionRows = $("#moneyDistributionModal table tbody tr select");
        for (var i = 0; i < distributionRows.length; i++) {
            var percentage = $(distributionRows[i]).val();
            if (percentage == undefined || percentage == "")
                continue;

            distributionData.push({
                AnswerID: $(distributionRows[i]).data("answerid"),
                Percentage: Number(percentage)
            });
        }

        SubmitDistributionDataViaAjax(distributionData);
    }

    function SubmitDistributionDataViaAjax(distributionData) {
        var data = {
            QuestionDocumentID: @documentID,
            Answers: distributionData
        };

        $.ajax({
            url: "/QuestionDocument/SaveDistribution",
            data: JSON.stringify(data),
            processData: false,
            contentType: "application/json; charset=utf-8",
            type: "POST",
            //dataType: "json",
            beforeSend: function () {
                $(".errorMessage, .successMessage").hide().text("");
                $("#moneyDistributionModal .spinner").show();
                $("button").attr("disabled", "disabled");
            },
            success: function (data) {
                $("#moneyDistributionModal .successMessage")
                    .text(data.successMessage)
                    .show();
                
                location.reload();
                //alert("File uploaded!");
            },
            error: function (data) {
                $("#moneyDistributionModal .errorMessage")
                    .text(data.responseJSON.errorMessage)
                    .show();
                $("#moneyDistributionModal .spinner").hide();
                $("button").removeAttr("disabled");
            },
            complete: function () {
                //$("#" + spinnerTagID).hide();
                //$(input).removeAttr("disabled");
            }
        });
    }










    var input;
    var answerID = 0;

    function SubmitAnswerForm() {
        var isValid = $('#addAnswerForm').valid();
        if (isValid) {
            ShowFormSpinner();
            DisableFormElements();

            $('#addAnswerForm')
                .append("<input type='hidden' name='DocumentID' value='@documentID' />");

            return true;
        }
        else
            return false;
    }

    function ShowFormSpinner() {
        $("#addAnswerForm .spinner").show();
    }

    function DisableFormElements() {
        $("#addAnswerForm input").attr("readonly", "readonly");
        $("#addAnswerForm textarea").attr("readonly", "readonly");
        $("#addAnswerForm button").attr("disabled", "disabled");
    }

    function AnswerPostError(data) {
        console.log(data);
        alert("error");
        $("#addAnswerForm .spinner").hide();
    }

    function AnswerPostSuccess(data) {
        console.log(data);
        answerID = data.id;
        //alert("success");

        input = document.getElementById('addAnswerFormAttachment')
        //input = $("#addAnswerForm input#attachment");
        console.log(input);
        if (!(input.files && input.files[0])) {
            //$("#" + spinnerTagID).hide();
            //alert("no file is selected");
            location.reload();
        }
        else {
            var file = input.files[0];
            UploadToFirebaseStorageAnswerFile(file);
        }
    }

    function AnswerPostCompleted(data) {
        console.log(data);
        //alert("completed");
        //$("#addAnswerForm .spinner").hide();
    }

    function UploadToFirebaseStorageAnswerFile(file) {
        var displayName = file.name;
        var extension = file.name.split('.')[1];

        // Create a root reference
        var storageRef = firebase.storage().ref();
        var uploadTask = storageRef.child('Answers/' + answerID + '.' + extension).put(file);

        // Listen for state changes, errors, and completion of the upload.
        uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'
            function (snapshot)
            {
                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                console.log('Upload is ' + progress + '% done');
                switch (snapshot.state)
                {
                    case firebase.storage.TaskState.PAUSED: // or 'paused'
                        console.log('Upload is paused');
                        break;
                    case firebase.storage.TaskState.RUNNING: // or 'running'
                        console.log('Upload is running');
                        break;
                }
            }, function (error)
            {
                $("#addAnswerForm .spinner").hide();
                console.log(error);
            }, function ()
            {
                // Upload completed successfully, now we can get the download URL
                var attachment = {
                    FileName: "" + answerID,
                    DisplayName: displayName,
                    Extension: extension,
                    Path: "",
                    Size: 0,
                    ContentType: "",
                    DownloadUrl: "",
                    FileType: fileType,
                    ModelID: answerID
                };
                //console.log(uploadTask.snapshot.ref);


                uploadTask.snapshot.ref.getMetadata().then(function (metaData)
                {
                    //console.log(metaData);

                    //attachment.Filename = metaData.name;
                    attachment.Path = metaData.fullPath;
                    attachment.Size = metaData.size;
                    attachment.ContentType = metaData.contentType;

                    uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL)
                    {
                        attachment.DownloadUrl = downloadURL;

                        //console.log(attachment);
                        FileAjaxUpload(input, file, attachment);
                    });
                });
            }
        );
    }

    function FileAjaxUpload(input, file, attachment) {
        if (file) {
            $.ajax({
                url: "/Attachment/Save",
                data: JSON.stringify(attachment),
                processData: false,
                contentType: "application/json; charset=utf-8",
                type: "POST",
                //dataType: "json",
                beforeSend: function () {
                    //alert("beforeSend");
                    //$("#" + spinnerTagID).show();
                    //$("#imgInp").attr("disabled", "disabled");
                    $(input).attr("disabled", "disabled");
                },
                success: function (data) {
                    location.reload();
                    //alert("File uploaded!");
                },
                error: function (data) {
                    alert("Error!");
                    $("#addAnswerForm .spinner").hide();
                },
                complete: function () {
                    //$("#" + spinnerTagID).hide();
                    //$(input).removeAttr("disabled");
                }
            });
        }
        else {
            //$("#" + spinnerTagID).hide();
            $("#addAnswerForm .spinner").hide();
            $(input).removeAttr("disabled");
        }
    }
</script>

