@model Expro.ViewModels.QuestionDetailsForSiteVM
@using Expro.ViewModels 
@using Expro.Models.Enums
@using Expro.Common

@{
    ViewData["Title"] = "Вопрос - детали";
    //ViewData["DocumentType"] = DocumentTypesEnum.QuestionDocument;
}

<h1>@ViewData["Title"]</h1>
<hr />

<div>
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Author)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Author.FullName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.DatePublished)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.DatePublished)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.LawAreas)
        </dt>
        <dd class="col-sm-10">
            @foreach (var lawArea in Model.LawAreas)
            {
                <span class="badge badge-primary">@lawArea.Name</span>
            }
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Text)
        </dt>
        <dd class="col-sm-10">
            @Html.Raw(Model.Text)
        </dd>
        @if (Model.Attachment != null && Model.Attachment.ID > 0)
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Attachment)
            </dt>
            <dd class="col-sm-10">
                <a href="@Model.Attachment.Url">@Model.Attachment.DisplayName</a>
            </dd>
        }

        @if (Model.PriceType == DocumentPriceTypesEnum.Paid)
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.PriceStr)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.PriceStr) сум
            </dd>
        }
    </dl>
</div>

<hr />
<h3>Ответы</h3>
<div class="row" id="answers">
    <div class="col-12">
        <button data-toggle="collapse" data-target="#addAnswerContainer">Написать ответ</button>
    </div>
    @if (Model.Answers.Count > 0)
    {
        foreach (var answer in Model.Answers)
        {
            <div class="col-12">
                <div class="card" style="margin-bottom: 20px;">
                    <div class="card-header">@answer.Author.FullName @answer.DatePublished</div>
                    <div class="card-body">
                        <p>@Html.Raw(answer.Text)</p>
                        @if (answer.Attachment.ID > 0)
                        {
                            <p><a href="@answer.Attachment.Url">@answer.Attachment.DisplayName</a></p>
                            <br />
                        }
                        <p>Лайки: @answer.PositiveLikesCount, Дислайки: @answer.NegativeLikesCount</p>
                    </div>
                    <div class="card-footer">
                        @{ 
                            Stack<CommentDetailsVM> commentsStack = new Stack<CommentDetailsVM>();

                            var rootComments = answer.Comments.Where(m => !m.ParentID.HasValue).OrderByDescending(m => m.ID).ToList();
                            foreach (var rootComment in rootComments)
                            {
                                rootComment.DepthLevel = 0;
                                commentsStack.Push(rootComment);
                            }

                            int paddingInt = 0;

                            while (commentsStack.Count > 0)
                            {
                                CommentDetailsVM currentComment = commentsStack.Pop();

                                paddingInt = currentComment.DepthLevel * 20;
                                string paddingStr = paddingInt + "px";

                                <div style="padding-left: @paddingStr">
                                    <p>@Html.Raw(currentComment.Text)</p>
                                </div>

                                var children = answer.Comments.Where(m => m.ParentID == currentComment.ID).OrderByDescending(m => m.ID).ToList();
                                if (children.Count > 0)
                                {
                                    foreach (var childComment in children)
                                    {
                                        childComment.DepthLevel = currentComment.DepthLevel + 1;
                                        commentsStack.Push(childComment);
                                    }
                                }
                            }
                        } 
                    </div>
                </div>
            </div>
                                }
                            }
                            else
                            {
        <p>Пока ничего нет</p>
                            }
</div>

@{
    ViewData["objectID"] = Model.ID;
    <div id="addAnswerContainer" class="collapse">
        @{ await Html.RenderPartialAsync("_AnswerCreateFormPartial", new Expro.ViewModels.QuestionAnswerCreateVM()); }
    </div>

    

    ////ViewData["targetContainerID"] = "comments";
    //ViewData["objectID"] = Model.ID;
    //ViewData["commentType"] = Constants.CommentTypes.DOCUMENT;

    //await Html.RenderPartialAsync("_CommentCreateFormPartial", new Expro.ViewModels.CommentCreateVM());
}

<div>
    <a asp-action="Index">Назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@*<script>
    $(document).ready(function () {

    });
</script>*@
}