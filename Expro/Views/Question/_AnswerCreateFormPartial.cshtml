@model Expro.ViewModels.QuestionAnswerCreateVM
@using Expro.Common

@{
    int documentID = int.Parse(ViewData["objectID"].ToString());
}

<form asp-action="AddAnswer" asp-controller="Question" id="addAnswerForm" onsubmit="SubmitAnswerForm()"
      data-ajax="true"
      data-ajax-method="POST"
      data-ajax-failure="AnswerPostFailure"
      data-ajax-success="AnswerPostSuccess"
      data-ajax-complete="AnswerPostCompleted">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="Text" class="control-label"></label>
        @*<textarea asp-for="Text" id="answerText" class="form-control ckeditorEditMode"></textarea>*@
        <textarea asp-for="Text" class="form-control"></textarea>
        <span asp-validation-for="Text" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label for="attachmentID" class="control-label"></label>
        <input type="file" id="addAnswerFormAttachment" class="form-control" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Отправить</button>
        <div class="spinner-border spinner" style="display: none;"></div>
    </div>
</form>

<script>
    var questionFileInput;
    var answerID = 0;

    function SubmitAnswerForm() {
        var isValid = $('#addAnswerForm').valid();
        if (isValid) {
            $("#addAnswerForm .spinner").show();

            DisableAnswerFormElements();

            if ($("#addAnswerForm input[name=QuestionID]").length)
                $("#addAnswerForm input[name=QuestionID]").val(@documentID);
            else {
                $('#addAnswerForm')
                    .append("<input type='hidden' name='QuestionID' value='@documentID' />");
            }

            return true;
        }
        else
            return false;
    }

    function ShowAnswerFormSpinner() {
        
    }

    function DisableAnswerFormElements() {
        $("#addAnswerForm input").attr("readonly", "readonly");
        $("#addAnswerForm textarea").attr("readonly", "readonly");
        $("#addAnswerForm button").attr("disabled", "disabled");
    }

    function AnswerPostFailure(data) {
        alert("Ошибка: " + data.responseJSON.errorMessage);
        //console.log(data);
        $("#addAnswerForm .spinner").hide();
    }

    function AnswerPostSuccess(data) {
        alert("success");
        console.log(data);
        answerID = data.id;
        //alert("success");

        questionFileInput = document.getElementById('addAnswerFormAttachment')
        //questionFileInput = $("#addAnswerForm input#attachment");
        console.log(questionFileInput);
        if (!(questionFileInput.files && questionFileInput.files[0])) {
            //$("#" + spinnerTagID).hide();
            //alert("no file is selected");
            location.reload();
        }
        else {
            var file = questionFileInput.files[0];
            UploadToFirebaseStorageAnswerFile(file);
        }
    }

    function AnswerPostCompleted(data) {
        //alert("completed");
        //console.log(data);
        //alert("completed");
        //$("#addAnswerForm .spinner").hide();
    }

    function UploadToFirebaseStorageAnswerFile(file) {
        var displayName = file.name;
        var extension = file.name.split('.')[1];

        // Create a root reference
        var storageRef = firebase.storage().ref();
        var uploadTask = storageRef.child('Answers/' + answerID + '.' + extension).put(file);

        // Listen for state changes, errors, and completion of the upload.
        uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'
            function (snapshot)
            {
                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                console.log('Upload is ' + progress + '% done');
                switch (snapshot.state)
                {
                    case firebase.storage.TaskState.PAUSED: // or 'paused'
                        console.log('Upload is paused');
                        break;
                    case firebase.storage.TaskState.RUNNING: // or 'running'
                        console.log('Upload is running');
                        break;
                }
            }, function (error)
            {
                $("#addAnswerForm .spinner").hide();
                console.log(error);
            }, function ()
            {
                // Upload completed successfully, now we can get the download URL
                var attachment = {
                    FileName: "" + answerID,
                    DisplayName: displayName,
                    Extension: extension,
                    Path: "",
                    Size: 0,
                    ContentType: "",
                    DownloadUrl: "",
                    FileType: "@Constants.FileTypes.QUESTION_ANSWER",
                    ModelID: answerID
                };
                //console.log(uploadTask.snapshot.ref);


                uploadTask.snapshot.ref.getMetadata().then(function (metaData)
                {
                    //console.log(metaData);

                    //attachment.Filename = metaData.name;
                    attachment.Path = metaData.fullPath;
                    attachment.Size = metaData.size;
                    attachment.ContentType = metaData.contentType;

                    uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL)
                    {
                        attachment.DownloadUrl = downloadURL;

                        //console.log(attachment);
                        FileAjaxUpload(questionFileInput, file, attachment);
                    });
                });
            }
        );
    }

    function FileAjaxUpload(input, file, attachment) {
        if (file) {
            $.ajax({
                url: "/Attachment/Save",
                data: JSON.stringify(attachment),
                processData: false,
                contentType: "application/json; charset=utf-8",
                type: "POST",
                //dataType: "json",
                beforeSend: function () {
                    //alert("beforeSend");
                    //$("#" + spinnerTagID).show();
                    //$("#imgInp").attr("disabled", "disabled");
                    $(input).attr("disabled", "disabled");
                },
                success: function (data) {
                    location.reload();
                    //alert("File uploaded!");
                },
                error: function (data) {
                    alert("Error!");
                    $("#addAnswerForm .spinner").hide();
                },
                complete: function () {
                    //$("#" + spinnerTagID).hide();
                    //$(input).removeAttr("disabled");
                }
            });
        }
        else {
            //$("#" + spinnerTagID).hide();
            $("#addAnswerForm .spinner").hide();
            $(input).removeAttr("disabled");
        }
    }
</script>