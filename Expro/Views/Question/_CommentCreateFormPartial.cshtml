@model Expro.ViewModels.CommentCreateVM
@using Expro.Common

@{
    //string targetContainerID = ViewData["targetContainerID"].ToString();
    //int objectID = int.Parse(ViewData["objectID"].ToString());
    string commentType = ViewData["commentType"].ToString();
}

<form asp-action="Save" asp-controller="Comment" id="addCommentForm" onsubmit="SubmitCommentForm()"
      data-ajax="true"
      data-ajax-method="POST"
      data-ajax-failure="CommentPostFailure"
      data-ajax-success="CommentPostSuccess"
      data-ajax-complete="CommentPostCompleted">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="Text" class="control-label"></label>
        <textarea asp-for="Text" id="commentText" class="form-control"></textarea>
        <span asp-validation-for="Text" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label for="attachment" class="control-label"></label>
        <div class="custom-file">
            <input type="file" class="js-file-attach custom-file-input" id="attachment"
                   accept=".doc, .docx, .rtf, .xml, .xls, .xlsx, .ppt, .pptx, text/plain, application/pdf, image/*"
                   data-hs-file-attach-options='{
                  "textTarget": "[for=\"attachment\"]"
               }'>
            <label class="custom-file-label" for="attachment">@localizer["SelectFile"]</label>
        </div>
    </div>
    @*<div class="form-group">
        <label for="attachmentID" class="control-label"></label>
        <input type="file" id="attachment" class="form-control" />
    </div>*@
    <div class="form-group">
        <button type="submit" class="btn btn-primary">@localizer["Submit"]</button>
        <div class="spinner-border spinner" style="display: none;"></div>
    </div>
</form>

<script>
    var commentObjectID = null;
    var parentCommentdID = null;
    var commentFileinput;
    var commentID = 0;
    //var fileType = "@Constants.FileTypes.COMMENT";

    function SetCommentObjectID(objectID, parentID) {
        if (objectID != undefined && objectID > 0)
            commentObjectID = objectID;

        if (parentID != undefined && parentID > 0)
            parentCommentdID = parentID;
    }

    function SubmitCommentForm() {
        var isValid = $('#addCommentForm').valid();
        if (isValid) {
            ShowCommentFormSpinner();
            DisableCommentFormElements();

            $('#addCommentForm')
                .append("<input type='hidden' name='ObjectID' value='" + commentObjectID + "' />")
                .append("<input type='hidden' name='ParentID' value='" + parentCommentdID + "' />")
                .append("<input type='hidden' name='CommentType' value='@commentType' />");

            return true;
        }
        else
            return false;
    }

    function ShowCommentFormSpinner() {
        $("#addCommentForm .spinner").show();
    }

    function DisableCommentFormElements() {
        $("#addCommentForm input").attr("readonly", "readonly");
        $("#addCommentForm textarea").attr("readonly", "readonly");
        $("#addCommentForm button").attr("disabled", "disabled");
    }

    function CommentPostFailure(data) {
        console.log(data);
        alert("error");
        $("#addCommentForm .spinner").hide();
    }

    function CommentPostSuccess(data) {
        console.log(data);
        commentID = data.id;
        //alert("success");

        commentFileinput = document.getElementById('attachment')
        //commentFileinput = $("#addCommentForm input#attachment");
        console.log(commentFileinput);
        if (!(commentFileinput.files && commentFileinput.files[0])) {
            //$("#" + spinnerTagID).hide();
            //alert("no file is selected");

            CompleteSavingComment();
            //location.reload();
        }
        else {
            var file = commentFileinput.files[0];
            UploadToFirebaseStorage(file);
        }
    }

    function CommentPostCompleted(data) {
        console.log(data);
        //alert("completed");
        //$("#addCommentForm .spinner").hide();
    }

    function UploadToFirebaseStorage(file) {
        var displayName = file.name;
        var extension = file.name.split('.')[1];

        // Create a root reference
        var storageRef = firebase.storage().ref();
        var uploadTask = storageRef.child('Comments/' + commentID + '.' + extension).put(file);

        // Listen for state changes, errors, and completion of the upload.
        uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'
            function (snapshot)
            {
                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                console.log('Upload is ' + progress + '% done');
                switch (snapshot.state)
                {
                    case firebase.storage.TaskState.PAUSED: // or 'paused'
                        console.log('Upload is paused');
                        break;
                    case firebase.storage.TaskState.RUNNING: // or 'running'
                        console.log('Upload is running');
                        break;
                }
            }, function (error)
            {
                $("#addCommentForm .spinner").hide();
                console.log(error);
            }, function ()
            {
                // Upload completed successfully, now we can get the download URL
                var attachment = {
                    FileName: "" + commentID,
                    DisplayName: displayName,
                    Extension: extension,
                    Path: "",
                    Size: 0,
                    ContentType: "",
                    DownloadUrl: "",
                    FileType: "@Constants.FileTypes.COMMENT",
                    ModelID: commentID
                };
                //console.log(uploadTask.snapshot.ref);


                uploadTask.snapshot.ref.getMetadata().then(function (metaData)
                {
                    //console.log(metaData);

                    //attachment.Filename = metaData.name;
                    attachment.Path = metaData.fullPath;
                    attachment.Size = metaData.size;
                    attachment.ContentType = metaData.contentType;

                    uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL)
                    {
                        attachment.DownloadUrl = downloadURL;

                        //console.log(attachment);
                        FileAjaxUpload2(commentFileinput, file, attachment);
                    });
                });
            }
        );
    }

    function FileAjaxUpload2(input, file, attachment) {
        if (file) {
            $.ajax({
                url: "/Attachment/Save",
                data: JSON.stringify(attachment),
                processData: false,
                contentType: "application/json; charset=utf-8",
                type: "POST",
                //dataType: "json",
                beforeSend: function () {
                    //alert("beforeSend");
                    //$("#" + spinnerTagID).show();
                    //$("#imgInp").attr("disabled", "disabled");
                    $(input).attr("disabled", "disabled");
                },
                success: function (data) {
                    CompleteSavingComment();
                    //location.reload();
                    //alert("File uploaded!");
                },
                error: function (data) {
                    alert("@localizer["Error"]!");
                    $("#addCommentForm .spinner").hide();
                },
                complete: function () {
                    //$("#" + spinnerTagID).hide();
                    //$(input).removeAttr("disabled");
                }
            });
        }
        else {
            //$("#" + spinnerTagID).hide();
            $("#addCommentForm .spinner").hide();
            $(input).removeAttr("disabled");
        }
    }

    function CompleteSavingComment() {
        //$("#addCommentForm .spinner").hide();
        //$(input).removeAttr("disabled");
        $("#addCommentForm #Text").val("");
        $("#addCommentForm #attachment").val("");


        location.reload();
    }
</script>