@model Expro.ViewModels.QuestionDetailsForSiteVM
@using Expro.ViewModels
@using Expro.Models.Enums
@using Expro.Common

@{
    ViewData["Title"] = localizer["QuestionDetails"];
    //ViewData["DocumentType"] = DocumentTypesEnum.QuestionDocument;
    bool? curUserIsAllowedToAnswer = ViewData["curUserIsAllowedToAnswer"] as bool?;
    bool? curUserIsAllowedToComment = ViewData["curUserIsAllowedToComment"] as bool?;
    bool? curUserIsAllowedToDistributeFee = ViewData["curUserIsAllowedToDistributeFee"] as bool?;
    bool? curUserIsAllowedToComplete = ViewData["curUserIsAllowedToComplete"] as bool?;

    bool? showAdminActions = ViewData["showAdminActions"] as bool?;
}

<div class="w-lg-60 mx-lg-auto">
    <h2>@ViewData["Title"]</h2>

    @if (ViewData["successMessage"] != null)
    {
        <div class="mt-5">
            <div class="alert alert-soft-success text-center rounded-0 mb-0" role="alert">
                @ViewData["successMessage"]
            </div>
        </div>
    }

    <!-- Author -->
    <div class="border-top border-bottom py-4 mb-5">
        <div class="row align-items-md-center">
            <div class="col-md-7 mb-5 mb-md-0">
                <div class="media align-items-center">
                    <div class="avatar avatar-circle">
                        <img class="avatar-img" src="@Model.Author.Avatar.Url" alt="Image Description">
                    </div>
                    <div class="media-body font-size-1 ml-3">
                        <span class="h6"><span>@Model.Author.FullName</span> @*<button type="button" class="btn btn-xs btn-soft-primary font-weight-bold transition-3d-hover py-1 px-2 ml-1">Follow</button>*@</span>
                        <span class="d-block text-muted">@Model.DatePublished</span>
                        @if (Model.PriceType == DocumentPriceTypesEnum.Paid)
                        {
                            <span class="badge badge-soft-info">@localizer["Fee"]: @Model.PriceStr @localizer["soum"]</span>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-5">
                <div class="d-flex justify-content-md-end align-items-center">
                    <span class="d-block small font-weight-bold text-cap mr-2">@localizer["Share"]:</span>
                    @{
                        var curPageFullUrl = Context.Request.Scheme + "://" + Context.Request.Host.Value + Context.Request.Path;
                        string telegramShareUrl = "https://t.me/share/url?url=" + curPageFullUrl + "&text=" + Model.Title;
                    }
                    <a class="btn btn-xs btn-icon btn-soft-secondary rounded-circle ml-2" href="@telegramShareUrl">
                        <i class="fab fa-telegram"></i>
                    </a>
                </div>
                @if (showAdminActions == true)
                {
                    <div class="d-flex justify-content-md-end align-items-center">
                        <span class="adminActions">
                            <button type="button" class="btn btn-danger btn-xs" onclick="Reject(@Model.ID);">@localizer["Reject"] <i class="fas fa-times ml-1"></i></button>
                            <span class="spinner-border spinner" style="display: none;"></span>
                        </span>
                    </div>
                }
            </div>
        </div>
    </div>
    <!-- End Author -->

    <div class="mb-4">
        <h2 class="h2">@Model.Title</h2>
    </div>

    <!-- Quill -->
    <div class="quill-custom Text">
        <div class="js-quill editorViewMode"
             data-hs-quill-options='{
                   "placeholder": "",
                    "modules": {
                      "toolbar": false
                    }
                   }'>
            @Html.Raw(Model.Text)
        </div>
    </div>
    <!-- End Quill -->

    @if (Model.Attachment != null && Model.Attachment.ID > 0)
    {
        <div class="mt-5">
            <i class="fa fa-file" aria-hidden="true"></i>
            <a href="@Model.Attachment.Url">@Model.Attachment.DisplayName</a>
        </div>
    }

    <!-- Badges -->
    <div class="mt-5">
        @foreach (var item in Model.LawAreas)
        {
            <a class="btn btn-xs btn-soft-secondary mb-1" href="javascript: void()">@item.Name</a>
        }
    </div>
    <!-- End Badges -->

    <div class="mt-5">
        @if (Model.IsCompleted)
        {
            if (Model.FeeIsDistributed)
            {
                <div class="alert alert-soft-success text-center rounded-0 mb-0" role="alert">
                    @localizer["QuestionSolved"]
                </div>
            }
            else
            {
                <div class="alert alert-soft-warning text-center rounded-0 mb-0" role="alert">
                    @localizer["QuestionClosed"]
                </div>
            }
        }
        else
        {
            if (Model.PriceType == DocumentPriceTypesEnum.Paid)
            {
                if (curUserIsAllowedToDistributeFee.Value)
                {
                    <div class="col-12" style="margin-bottom: 20px; margin-top: 20px;">
                        <button class="btn btn-info" data-toggle="modal" data-target="#moneyDistributionModal">@localizer["DistributeFee"]</button>
                    </div>
                }

                if (curUserIsAllowedToComplete.Value)
                {
                    <div class="col-12" style="margin-bottom: 20px; margin-top: 20px;">
                        <button class="btn btn-danger" id="closeQuestionBtn" onclick="CloseQuestion();">@localizer["CloseQuestion"]</button>
                        <div class="spinner-border spinner" style="display: none;"></div>
                    </div>
                }
            }

            if (curUserIsAllowedToAnswer.Value)
            {
                <div class="col-12" style="margin-bottom: 20px; margin-top: 20px;">
                    <button class="btn btn-success" data-toggle="collapse" data-target="#addAnswerContainer">@localizer["WriteAnswer"]</button>
                </div>
            }
        }
    </div>

    <div class="pt-2 mb-11">
        @if (Model.Answers.Count > 0)
        {
            <div class="mb-4">
                <h3>@localizer["Answers"] (@Model.Answers.Count)</h3>
            </div>

            <ul class="list-unstyled">
                @{
                    int i = 1;
                }
                @foreach (var answer in Model.Answers)
                {
                    <li class="mb-5">
                        <hr />
                        <h4>@localizer["AnswerN"] @i</h4>
                    </li>

                    i++;

                    <!-- Answer -->
                    <li class="mb-5 ">
                        <div class="card card-frame">
                            <div class="card-body">
                                <div class="media align-items-center mb-2">
                                    <div class="avatar avatar-circle mr-3">
                                        <img class="avatar-img" src="@answer.Author.Avatar.Url" alt="Image Description">
                                        @if (answer.Author.IsOnline)
                                        {
                                            <span class="avatar-status avatar-sm-status avatar-success"></span>
                                        }
                                    </div>
                                    <div class="media-body">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="h5 mb-0">
                                                <a href="/Experts/Details/@answer.Author.ID">@answer.Author.FullName</a>
                                                @if (!string.IsNullOrWhiteSpace(answer.PaidFeeStr))
                                                {
                                                    <span class="badge badge-success">@localizer["FeePaid"]: @answer.PaidFeeStr @localizer["soum"]</span>
                                                }
                                            </span>
                                            <small class="text-muted">@answer.DatePublished</small>
                                        </div>
                                        @if (showAdminActions == true)
                                        {
                                            <div class="d-flex justify-content-md-end align-items-center">
                                                <button type="button" class="btn btn-danger btn-xs" onclick="MarkAnswerAsDeleted(@answer.ID);">@localizer["Delete"] <i class="fas fa-times ml-1"></i></button>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <!-- Quill -->
                                <div class="quill-custom Text">
                                    <div class="js-quill editorViewMode"
                                         data-hs-quill-options='{
                       "placeholder": "",
                        "modules": {
                          "toolbar": false
                        }
                       }'>
                                        @Html.Raw(answer.Text)
                                    </div>
                                </div>
                                <!-- End Quill -->

                                @if (answer.Attachment.ID > 0)
                                {
                                    <div class="mt-5">
                                        <i class="fa fa-file" aria-hidden="true"></i>
                                        <a href="@answer.Attachment.Url">@answer.Attachment.DisplayName</a>
                                    </div>
                                }

                                <div class="mt-5" id="likesInfoBox_@answer.ID">
                                    @if (User.Identity.IsAuthenticated)
                                    {
                                    
                                        @if (answer.ViewerUserHasLikeOrDislike.HasValue)
                                        {
                                            if (answer.ViewerUserHasLikeOrDislike.Value == true)
                                            {
                                                <span><a href="javascript:void(0)" class="text-info"><i class="fa fa-thumbs-up"></i> @answer.PositiveLikesCount</a></span>
                                                <span class="ml-4"><a href="javascript:void(0)" class="text-muted"><i class="fa fa-thumbs-down"></i> @answer.NegativeLikesCount</a></span>
                                            }
                                            else
                                            {
                                                <span><a href="javascript:void(0)" class="text-muted"><i class="fa fa-thumbs-up"></i> @answer.PositiveLikesCount</a></span>
                                                <span class="ml-4"><a href="javascript:void(0)" class="text-info"><i class="fa fa-thumbs-down"></i> @answer.NegativeLikesCount</a></span>
                                            }
                                        }
                                        else
                                        {
                                            <span><a href="javascript:void(0)" class="text-muted" onclick="Like(@answer.ID)"><i class="fa fa-thumbs-up"></i> @answer.PositiveLikesCount</a></span>
                                            <span class="ml-4"><a href="javascript:void(0)" class="text-muted" onclick="Dislike(@answer.ID)"><i class="fa fa-thumbs-down"></i> @answer.NegativeLikesCount</a></span>
                                        }
                                    }
                                    else
                                    {
                                        <div>
                                            @*<span><a href="javascript:void(0)" class="text-muted" data-toggle="popover" data-trigger="focus" data-html="true" data-content="@localizer["UnauthorizedLikePopover", ViewData["curPageUrl"]]"><i class="fa fa-thumbs-up"></i> @answer.PositiveLikesCount</a></span>
                                            <span class="ml-4"><a href="javascript:void(0)" class="text-muted" data-toggle="popover" data-trigger="focus" data-html="true" data-content="@localizer["UnauthorizedDislikePopover", ViewData["curPageUrl"]]"><i class="fa fa-thumbs-down"></i> @answer.NegativeLikesCount</a></span>*@
                                            <span><a href="javascript:void(0)" class="text-muted" onclick="Like(@answer.ID)"><i class="fa fa-thumbs-up"></i> @answer.PositiveLikesCount</a></span>
                                            <span class="ml-4"><a href="javascript:void(0)" class="text-muted" onclick="Dislike(@answer.ID)"><i class="fa fa-thumbs-down"></i> @answer.NegativeLikesCount</a></span>
                                        </div>
                                    }

                                    <div class="spinner-border spinner" style="display: none;"></div>
                                </div>

                                @if (curUserIsAllowedToComment.Value && !Model.IsCompleted)
                                {
                                    <p><button class="btn btn-link font-weight-bold" data-toggle="collapse" data-target="#addCommentContainer" onclick="SetCommentObjectID(@answer.ID);">@localizer["DoComment"]</button></p>
                                }
                            </div>
                        </div>

                    </li>
                    <!-- End Answer -->

                    Stack<CommentDetailsVM> commentsStack = new Stack<CommentDetailsVM>();

                    if (answer.Comments.Count > 0)
                    {
                        <li class="mb-5">
                            <h5>@localizer["Comments"] (@answer.Comments.Count)</h5>
                        </li>
                    }

                    var rootComments = answer.Comments.Where(m => !m.ParentID.HasValue).OrderByDescending(m => m.ID).ToList();
                    foreach (var rootComment in rootComments)
                    {
                        rootComment.DepthLevel = 0;
                        commentsStack.Push(rootComment);
                    }

                    int paddingInt = 0;

                    while (commentsStack.Count > 0)
                    {
                        CommentDetailsVM currentComment = commentsStack.Pop();

                        paddingInt = currentComment.DepthLevel * 20;
                        string paddingStr = paddingInt + "px";

                        <li class="mb-5">
                            <div class="border-left border-3 pl-4" style="margin-left: @paddingStr">
                                <div class="media align-items-center mb-2">
                                    <div class="avatar avatar-circle mr-3">
                                        <img class="avatar-img" src="@currentComment.Author.Avatar.Url" alt="Image Description">
                                        @if (currentComment.Author.IsOnline)
                                        {
                                            <span class="avatar-status avatar-sm-status avatar-success"></span>
                                        }
                                    </div>
                                    <div class="media-body">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="h5 mb-0">@currentComment.Author.FullName</span>
                                            <small class="text-muted">@currentComment.DatePublished</small>
                                        </div>
                                        @if (showAdminActions == true)
                                        {
                                            <div class="d-flex justify-content-md-end align-items-center">
                                                <button type="button" class="btn btn-danger btn-xs" onclick="DeleteComment(@currentComment.ID);">@localizer["Delete"] <i class="fas fa-times ml-1"></i></button>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <!-- Quill -->
                                <div class="quill-custom Text">
                                    <div class="js-quill editorViewMode"
                                         data-hs-quill-options='{
                                "placeholder": "",
                                "modules": {
                                    "toolbar": false
                                }
                                }'>
                                        @Html.Raw(currentComment.Text)
                                    </div>
                                </div>
                                <!-- End Quill -->

                                @if (answer.Attachment.ID > 0)
                                {
                                    <div class="mt-5">
                                        <i class="fa fa-file" aria-hidden="true"></i>
                                        <a href="@currentComment.Attachment.Url">@currentComment.Attachment.DisplayName</a>
                                    </div>
                                }

                                @if (curUserIsAllowedToComment.Value && !Model.IsCompleted)
                                {
                                    <p><button class="btn btn-link font-weight-bold" data-toggle="collapse" data-target="#addCommentContainer" onclick="SetCommentObjectID(@answer.ID, @currentComment.ID);">@localizer["DoComment"]</button></p>
                                }
                            </div>
                        </li>

                        var children = answer.Comments.Where(m => m.ParentID == currentComment.ID).OrderByDescending(m => m.ID).ToList();
                        if (children.Count > 0)
                        {
                            foreach (var childComment in children)
                            {
                                childComment.DepthLevel = currentComment.DepthLevel + 1;
                                commentsStack.Push(childComment);
                            }
                        }
                    }
                }
            </ul>
        }
        else
        {
            <div class="mb-4">
                <h3>@localizer["NoAnswers"]</h3>
            </div>
        }
    </div>
</div>

@{
    ViewData["objectID"] = Model.ID;
    if (curUserIsAllowedToAnswer.Value)
    {
        <div id="addAnswerContainer" class="collapse">
            @if (ViewData["userIsAllowedToWorkWithPaidMaterials"] == null
                || bool.Parse(ViewData["userIsAllowedToWorkWithPaidMaterials"].ToString()))
            {
                await Html.RenderPartialAsync("_AnswerCreateFormPartial", new Expro.ViewModels.QuestionAnswerCreateVM());
            }
            else
            {
                <div class="lert alert-soft-danger text-center rounded-0 mb-0">
                    @localizer["WarningNotEnoughPointToGiveAnswerForQuestionWithFee"]
                </div>
            }
        </div>
    }

    if (curUserIsAllowedToComment.Value)
    {
        ViewData["commentType"] = Constants.CommentTypes.QUESTION_ANSWER;
        <div id="addCommentContainer" class="collapse">
            @{ await Html.RenderPartialAsync("_CommentCreateFormPartial", new Expro.ViewModels.CommentCreateVM()); }
        </div>
    }

    if (curUserIsAllowedToDistributeFee.Value)
    {
        await Html.RenderPartialAsync("_MoneyDistributionFormPartial", Model.Answers);
    }
}

<div>
    <a asp-action="Index">@localizer["Back"]</a>
</div>

@section CustomFrontStyles
{
    <link rel="stylesheet" href="~/lib/frontTheme/vendor/select2/dist/css/select2.min.css">
    <link rel="stylesheet" href="~/lib/frontTheme/vendor/quill/dist/quill.snow.css">
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script src="~/lib/frontTheme/vendor/select2/dist/js/select2.full.min.js"></script>
    <script src="~/lib/frontTheme/vendor/hs-file-attach/dist/hs-file-attach.min.js"></script>
    <script src="~/lib/frontTheme/vendor/quill/dist/quill.min.js"></script>

    <script>
        $(document).ready(function () {
            InitCollapsibleItems();
            InitPopover();

            InitQuill();
            InitQuillForView();

            InitFileUploader();
            InitSelectpicker();

            //var addAnswerForm = document.getElementById("addAnswerForm");
            //$.validator.unobtrusive.parse(addAnswerForm);
        });

        function InitQuill() {
            // INITIALIZATION OF QUILLJS EDITOR
            // =======================================================
            var options = {
                //debug: 'info',
                //modules: {
                //    toolbar: '#toolbar'
                //},
                //placeholder: 'Compose an epic...',
                //readOnly: true,
                //theme: 'snow'
            };
            var quill = $.HSCore.components.HSQuill.init('.js-quill.editorEditMode', options);
            //console.log(quill);
            if (quill == undefined)
                return null;

            quill.on('text-change', function (delta, oldDelta, source) {
                //if (source == 'api') {
                //    alert("An API call triggered this change.");
                //} else if (source == 'user') {
                //    alert("A user action triggered this change.");
                //}

                var html = $("form#addAnswerForm .quill-custom.Text .ql-editor").html();
                if (html == "<p><br></p>")
                    html = "";
                //console.log(html);

                //alert(html);

                $("form#addAnswerForm textarea#Text").val(html);
            });

            return quill;
        }

        function InitQuillForView() {
            // INITIALIZATION OF QUILLJS EDITOR
            // =======================================================
            var options = {
                //debug: 'info',
                //modules: {
                //    toolbar: '#toolbar'
                //},
                //placeholder: 'Compose an epic...',
                readOnly: true,
                //theme: 'snow'
            };
            var quill = $.HSCore.components.HSQuill.init('.js-quill.editorViewMode', options);

            return quill;
        }

        function InitFileUploader() {
            // INITIALIZATION OF CUSTOM FILE
            // =======================================================
            $('.js-file-attach').each(function () {
                var customFile = new HSFileAttach($(this)).init();
            });
        }

        function InitSelectpicker() {
            // INITIALIZATION OF SELECT2
            // =======================================================
            $('.js-custom-select').each(function () {
                var select2 = $.HSCore.components.HSSelect2.init($(this));
            });
        }

        function InitCollapsibleItems() {
            $(".collapse#addAnswerContainer").on('shown.bs.collapse', function () {
                $([document.documentElement, document.body]).animate({
                    scrollTop: $(".collapse#addAnswerContainer").offset().top
                }, 500);
            });

            $(".collapse#addCommentContainer").on('shown.bs.collapse', function () {
                $([document.documentElement, document.body]).animate({
                    scrollTop: $(".collapse#addCommentContainer").offset().top
                }, 500);
            });
        }

        function CloseQuestion() {
            if (!confirm("@localizer["AreYouSureToCloseQuestionWithoutFeeDistribution"]"))
                return;

            $.ajax({
                url: "/Question/Complete/@Model.ID",
                //data: JSON.stringify(data),
                processData: false,
                contentType: "application/json; charset=utf-8",
                type: "POST",
                //dataType: "json",
                beforeSend: function () {
                    $("button#closeQuestionBtn").parent().children(".spinner").show();
                    $("button").attr("disabled", "disabled");
                },
                success: function (data) {
                    location.reload();
                    //alert("File uploaded!");
                },
                error: function (data) {
                    alert(data.responseJSON.errorMessage);
                    $("button").removeAttr("disabled");
                },
                complete: function () {
                    //$("#" + spinnerTagID).hide();
                    //$(input).removeAttr("disabled");
                }
            });
        }

        function InitPopover() {
            $(document).ready(function () {
                $('[data-toggle="popover"]').popover();
            });
        }
    </script>

    <script>
        function Like(answerID, isLike) {
            var isPositive = true;
            if (isLike == false)
                isPositive = false;

            var likeData = {
                ObjectID: answerID,
                IsPositive: isPositive,
                LikeType: "@Constants.LikeTypes.QUESTION_ANSWER"
            };

            $.ajax({
                url: "/Like/Save",
                data: JSON.stringify(likeData),
                processData: false,
                contentType: "application/json; charset=utf-8",
                type: "POST",
                //dataType: "json",
                beforeSend: function () {
                    //$(".errorMessage, .successMessage").hide().text("");
                    $("#likesInfoBox_" + answerID + " .spinner").show();
                    $("#likesInfoBox_" + answerID + " a").attr("disabled", "disabled");
                },
                success: function (data) {
                    //$("#moneyDistributionModal .successMessage")
                    //    .text(data.successMessage)
                    //    .show();

                    location.reload();
                    //alert("File uploaded!");
                },
                error: function (data) {
                    $("#likesInfoBox_" + answerID + " .spinner").hide();
                    $("#likesInfoBox_" + answerID + " a").removeAttr("disabled");
                },
                complete: function () {
                    //$("#" + spinnerTagID).hide();
                    //$(input).removeAttr("disabled");
                }
            });
        }

        function Dislike(answerID) {
            Like(answerID, false);
        }
    </script>

    <script>
        function Reject(id) {
            var confirmationText = "Вы уверены, что хотите отменить?";

            if (!confirm(confirmationText))
                return;

            $.ajax({
                type: "POST",
                url: "/Admin/Question/Reject/" + id,
                //data: {
                //    id: requestID
                //},
                //data: JSON.stringify({
                //    id: requestID
                //}),
                contentType: "application/json; charset=utf-8",
                //dataType: "json",
                beforeSend: function (data) {
                    $(".btn").attr("disabled", "disabled");
                    $(".adminActions .spinner").show();
                },
                success: function (data) {
                    //alert("success");
                    //alert(data);
                    location.replace("/Question");
                },
                error: function (data) {
                    alert("Ajax error (status code = " + data.status + "): " + data.statusText);
                    $(".adminActions .spinner").hide();
                },
                complete: function (data) {
                    //alert("completed");
                    //$(".btn").removeAttr("disabled");
                }
            });
        }

        function MarkAnswerAsDeleted(answerID) {
            var confirmationText = "Вы уверены, что хотите удалить ответ?";

            if (!confirm(confirmationText))
                return;

            $.ajax({
                type: "POST",
                url: "/Admin/Question/MarkAnswerAsDeleted?answerID=" + answerID,
                //data: {
                //    id: requestID
                //},
                //data: JSON.stringify({
                //    id: requestID
                //}),
                contentType: "application/json; charset=utf-8",
                //dataType: "json",
                beforeSend: function (data) {
                    $(".btn").attr("disabled", "disabled");
                },
                success: function (data) {
                    //alert("success");
                    //alert(data);
                    location.reload();
                },
                error: function (data) {
                    alert("Ajax error (status code = " + data.status + "): " + data.statusText);
                    $(".btn").removeAttr("disabled");
                },
                complete: function (data) {
                    //alert("completed");
                    //$(".btn").removeAttr("disabled");
                }
            });
        }

        function DeleteComment(commentID) {
            var confirmationText = "Вы уверены, что хотите удалить комментарий?";

            if (!confirm(confirmationText))
                return;

            $.ajax({
                type: "POST",
                url: "/Comment/Delete?id=" + commentID,
                //data: {
                //    id: requestID
                //},
                //data: JSON.stringify({
                //    id: requestID
                //}),
                contentType: "application/json; charset=utf-8",
                //dataType: "json",
                beforeSend: function (data) {
                    $(".btn").attr("disabled", "disabled");
                },
                success: function (data) {
                    //alert("success");
                    //alert(data);
                    location.reload();
                },
                error: function (data) {
                    alert("Ajax error (status code = " + data.status + "): " + data.statusText);
                    $(".btn").removeAttr("disabled");
                },
                complete: function (data) {
                    //alert("completed");
                    //$(".btn").removeAttr("disabled");
                }
            });
        }
    </script>
}
